import{_ as r,W as l,X as o,Y as e,Z as n,$ as t,a2 as i,G as d}from"./framework-a4372378.js";const s={},c=i(`<h1 id="第一章-javascript历史" tabindex="-1"><a class="header-anchor" href="#第一章-javascript历史" aria-hidden="true">#</a> 第一章 JavaScript历史</h1><h1 id="第二章-语法" tabindex="-1"><a class="header-anchor" href="#第二章-语法" aria-hidden="true">#</a> 第二章 语法</h1><h2 id="_2-1-语法" tabindex="-1"><a class="header-anchor" href="#_2-1-语法" aria-hidden="true">#</a> 2.1 语法</h2><p>2.1区分大小写</p><p>2.2标识符，就是变量、函数、属性或函数参数的名称</p><p>第一个字符必须是一个字母、下划线（ _ ）或美元符号（ $ ）； 剩下的其他字符可以是字母、下划线、美元符号或数字</p><p>ECMAScript 标识符使用驼峰大小写形式，即第一个单词的首字母小写，后面每个单词 的首字母大写</p><p>2.3注释</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 单行注释
块注释以一个斜杠和一个星号（ /* ）开头，以它们的反向组合（ */ ）结尾，如：
/* 这是多行
注释 */
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.4 严格模式</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&quot;use strict&quot;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>2.5 语句</p><p>分号</p><h2 id="_2-2-关键字和保留字" tabindex="-1"><a class="header-anchor" href="#_2-2-关键字和保留字" aria-hidden="true">#</a> 2.2 关键字和保留字</h2><h2 id="_2-3-变量声明" tabindex="-1"><a class="header-anchor" href="#_2-3-变量声明" aria-hidden="true">#</a> 2.3 变量声明</h2><p>var</p><p>let</p><p>const</p><h2 id="_2-4-数据类型" tabindex="-1"><a class="header-anchor" href="#_2-4-数据类型" aria-hidden="true">#</a> 2.4 数据类型</h2><p>ECMAScript 有 6 种简单数据类型（也称为原始类型）： Undefined 、 Null 、 Boolean 、 Number 、 String 和 Symbol</p><h3 id="_2-4-1-typeof" tabindex="-1"><a class="header-anchor" href="#_2-4-1-typeof" aria-hidden="true">#</a> 2.4.1 typeof</h3><p>对一个值使用 typeof 操作符会返回下列字符串之一： &quot;undefined&quot; 表示值未定义； &quot;boolean&quot; 表示值为布尔值； &quot;string&quot; 表示值为字符串； &quot;number&quot; 表示值为数值； &quot;object&quot; 表示值为对象（而不是函数）或 null ； &quot;function&quot; 表示值为函数； &quot;symbol&quot; 表示值为符号。</p><h1 id="正则" tabindex="-1"><a class="header-anchor" href="#正则" aria-hidden="true">#</a> 正则</h1><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符" aria-hidden="true">#</a> 修饰符</h2><p>在 JavaScript 中，有 6 个修饰符：</p>`,25),u=e("li",null,[e("p",null,[e("code",null,"i")]),e("p",null,[n("使用此修饰符后，搜索时不区分大小写："),e("code",null,"A"),n(" 和 "),e("code",null,"a"),n(" 之间没有区别（请参见下面的示例）。")])],-1),h=e("li",null,[e("p",null,[e("code",null,"g")]),e("p",null,"使用此修饰符后，搜索时会寻找所有的匹配项 —— 没有它，则仅返回第一个匹配项。")],-1),p=e("p",null,[e("code",null,"m")],-1),_={href:"https://zh.javascript.info/regexp-multiline-mode",target:"_blank",rel:"noopener noreferrer"},f=e("p",null,[e("code",null,"s")],-1),v=e("code",null,".",-1),b=e("code",null,"\\n",-1),m={href:"https://zh.javascript.info/regexp-character-classes",target:"_blank",rel:"noopener noreferrer"},x=e("p",null,[e("code",null,"u")],-1),g={href:"https://zh.javascript.info/regexp-unicode",target:"_blank",rel:"noopener noreferrer"},q=e("p",null,[e("code",null,"y")],-1),k={href:"https://zh.javascript.info/regexp-sticky",target:"_blank",rel:"noopener noreferrer"};function y(j,S){const a=d("ExternalLinkIcon");return l(),o("div",null,[c,e("ul",null,[u,h,e("li",null,[p,e("p",null,[n("多行模式（详见 "),e("a",_,[n('锚点 ^ $ 的多行模式，修饰符 "m"'),t(a)]),n("）。")])]),e("li",null,[f,e("p",null,[n("启用 “dotall” 模式，允许点 "),v,n(" 匹配换行符 "),b,n("（在 "),e("a",m,[n("字符类"),t(a)]),n(" 中有详细介绍）。")])]),e("li",null,[x,e("p",null,[n("开启完整的 Unicode 支持。该修饰符能够正确处理代理对。详见 "),e("a",g,[n('Unicode：修饰符 "u" 和类 \\p{...}'),t(a)]),n("。")])]),e("li",null,[q,e("p",null,[n("粘滞模式，在文本中的确切位置搜索（详见 "),e("a",k,[n('粘性修饰符 "y"，在位置处搜索'),t(a)]),n("）")])])])])}const E=r(s,[["render",y],["__file","1.html.vue"]]);export{E as default};
